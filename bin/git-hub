#!/usr/bin/env bash

################################################################################
# name: git-hub
# what: control your github.com (or enterprise) repo from the command-line
################################################################################
# copyright (c) 2012 Wil Moore III <wil.moore@wilmoore.com>

################################################################################
# "Be conservative in what you do; be liberal in which you accept from others."
################################################################################

set -e
set -o errexit
set -o errtrace

################################################################################
# command-line options
################################################################################

OPTIONS_SPEC="\
git hub [ --contributors | --issues | --pull-request | --stargazers | --wiki ]
--
c,contributors  go to contributors list
i,issues        go to issue tracker
p,pull-request  new pull request from current branch
s,stargazers    go to stargazers list
w,wiki          go to wiki pages
force-origin    force origin
"

################################################################################
# NOT RECOMMENDED TO MODIFY UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING!
################################################################################

# run from a subdirectory
SUBDIRECTORY_OK=Yes

################################################################################
# bootstrap
################################################################################

. git-sh-setup
. git-sh-i18n

# require a working tree
require_work_tree_exists

# current git branch
CURRENT_BRANCH=$(git describe --contains --all HEAD)

# force use of origin remote?
FORCE_ORIGIN=0

for opt; do
  if [ ${opt} = '--force-origin' ]; then
    FORCE_ORIGIN=1
  fi
done

################################################################################
# helpers
################################################################################

upstream_url() {
  local URL=$(git config --get remote.upstream.url)
  echo $(echo ${URL} | tr ':' '/' | sed -e 's@.git$@@' -e 's/^[^@]*@//')
}

origin_url() {
  local URL=$(git config --get remote.origin.url)
  echo $(echo ${URL} | tr ':' '/' | sed -e 's@.git$@@' -e 's/^[^@]*@//')
}

upstream_or_origin() {
  if [ ! -z "$(upstream_url)" ]; then
    echo $(upstream_url)
  else
    echo $(origin_url)
  fi
}

################################################################################
# commands
################################################################################

for opt
do

  case "$opt" in

    -c|--contributors)

      if [[ $FORCE_ORIGIN -eq 1 ]]; then
        open http://$(origin_url)/graphs/contributors
      else
        open http://$(upstream_or_origin)/graphs/contributors
      fi

      break
      ;;

    -i|--issues)

      if [[ $FORCE_ORIGIN -eq 1 ]]; then
        open http://$(origin_url)/issues
      else
        open http://$(upstream_or_origin)/issues
      fi

      break
      ;;

    -p|--pull-request)

      if [ $(git branch -r | grep $CURRENT_BRANCH) ]; then
        # if we are on a branch and it exists on origin, issue pull request against it
        open http://$(origin_url)/pull/new/$CURRENT_BRANCH
      else
        # otherwise, issue a blank pull request
        open http://$(origin_url)/pull/new
      fi

      break
      ;;

    -s|--stargazers)

      if [[ $FORCE_ORIGIN -eq 1 ]]; then
        open http://$(origin_url)/stargazers
      else
        open http://$(upstream_or_origin)/stargazers
      fi

      break
      ;;

    -w|--wiki)

      if [[ $FORCE_ORIGIN -eq 1 ]]; then
        open http://$(origin_url)/wiki
      else
        open http://$(upstream_or_origin)/wiki
      fi

      break
      ;;

    -h|--help-all)
      usage
      ;;

    *)

      if [ ! -z "$CURRENT_BRANCH" ]; then
        open http://$(origin_url)/tree/$CURRENT_BRANCH
      else
        open http://$(origin_url)
      fi

      break
      ;;

  esac
done
